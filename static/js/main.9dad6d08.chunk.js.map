{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","appAddTask","console","log","input","placeholder","autoComplete","FilterButton","aria-pressed","setFilter","FILTER_NAMES","Object","keys","ALL","Active","task","Completed","App","tasks","setTasks","to","path","About","addTask","newTask","nanoid","alert","updatedTasks","map","remainingTasks","filter","Users","Home","taskList","tasksNoun","length","headingText","filterList","isPressed","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dad6d08.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function Todo(props) {\n\n    const [isEditing, setEditing] = useState(false)\n    const [newName, setNewName] = useState('');\n\n    function handleChange(e) {\n      setNewName(e.target.value);\n    }\n\n    function handleSubmit(e) {\n      e.preventDefault()\n      props.editTask(props.id, newName)\n      setNewName(\"\")\n      setEditing(false)\n    }\n\n    const editingTemplate = (\n      <form className=\"stack-small\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label className=\"todo-label\" htmlFor={props.id}>\n            New name for {props.name}\n          </label>\n          <input id={props.id} className=\"todo-text\" type=\"text\"  value={newName} onChange={handleChange}/>\n        </div>\n        <div className=\"btn-group\">\n          <button type=\"button\" className=\"btn todo-cancel\" onClick={() => setEditing(false)}>\n            Cancel\n            <span className=\"visually-hidden\">renaming {props.name}</span>\n          </button>\n          <button type=\"submit\" className=\"btn btn__primary todo-edit\">\n            Save\n            <span className=\"visually-hidden\">new name for {props.name}</span>\n          </button>\n        </div>\n      </form>\n    );\n\n    const viewTemplate = (\n      <div className=\"stack-small\">\n        <div className=\"c-cb\">\n            <input\n              id={props.id}\n              type=\"checkbox\"\n              defaultChecked={props.completed}\n              onChange={() => props.toggleTaskCompleted(props.id)}\n            />\n            <label className=\"todo-label\" htmlFor={props.id}>\n              {props.name}\n            </label>\n          </div>\n          <div className=\"btn-group\">\n            <button type=\"button\" className=\"btn\" onClick={() => setEditing(true)}>\n              Edit <span className=\"visually-hidden\">{props.name}</span>\n            </button>\n            <button\n              type=\"button\"\n              className=\"btn btn__danger\"\n              onClick={() => props.deleteTask(props.id)}\n            >\n              Delete <span className=\"visually-hidden\">{props.name}</span>\n            </button>\n          </div>\n      </div>\n    );\n\n    return (\n      <li className=\"todo stack-small\">\n        {isEditing ? editingTemplate : viewTemplate}\n      </li>\n    );\n}","import React, {useState} from 'react'\n\n\n\nfunction Form(props) {\n    const [name, setName] = useState('');\n    \n    function handleSubmit(e) {\n      e.preventDefault()\n      if(name)\n      {\n        props.appAddTask(name)\n        setName(\"\")\n        console.log(\"inside form\")\n      }\n    }\n    \n    function handleChange(e) {\n      console.log(\"Typing!\")\n      console.log(e.target.value)\n      setName(e.target.value)\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n          <h2 className=\"label-wrapper\">\n            <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n              What needs to be done?\n            </label>\n          </h2>\n          <input\n            input=\"text\"\n            id=\"new-todo-input\"\n            className=\"input input__lg\"\n            name={name}\n            placeholder={name}\n            // value={name}\n            autoComplete=\"off\"\n            onChange={handleChange} />\n          <button type=\"submit\" className=\"btn btn__primary btn_lg\">\n            Add\n          </button>\n      </form>\n    )\n}\n\nexport default Form;","import React from 'react'\n\nfunction FilterButton(props) {\n    return (\n        <button type=\"button\" className=\"btn toggle-btn\" aria-pressed={\"true\"} onClick={props.setFilter(props.name)}>\n        <span className=\"visually-hidden\">Show</span>\n        <span>{props.name}</span>\n        <span className=\"visually-hidden\">tasks</span>\n      </button>\n    )\n}\n\nexport default FilterButton;","import React, {useState} from \"react\";\nimport {nanoid} from 'nanoid';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Todo from './components/Todo'\nimport Form from './components/Form'\nimport FilterButton from './components/FilterButton'\n\nconst FILTER_MAP = {\n  ALL: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n}\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP)\n\nexport default function App(props) {\n  \n  const [tasks, setTasks] = useState(props.tasks);\n  \n  function addTask(name){\n    const newTask = { id: \"task-\" + nanoid(), name: name, completed: false };\n    alert(name + \" inside addTask\")\n    setTasks([...tasks, newTask])\n  }\n\n  function toggleTaskCompleted(id) {\n    // console.log(tasks[0])\n    const updatedTasks = tasks.map((task) => {\n      if (id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task\n    })\n    setTasks(updatedTasks)\n  }\n\n  function deleteTask(id){\n    console.log(id)\n    const remainingTasks = tasks.filter((task) => id !== task.id)\n    setTasks(remainingTasks)\n  }\n\n  function editTask(id, newName) {\n    const updatedTasks = tasks.map((task) => {\n      if (id === task.id) {\n        return {...task, name: newName}\n      }\n      return task\n    })\n    setTasks(updatedTasks)\n\n  }\n\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users Again</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About task={tasks} addTask={addTask} toggleTaskCompleted={toggleTaskCompleted} deleteTask={deleteTask} editTask={editTask}/>\n          </Route>\n          <Route path=\"/users\">\n            <Users />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction About(props) {\n\n  const [filter, setFilter] = useState(\"All\");\n\n  const taskList = props.task.map((task) => \n    <Todo \n      id={task.id} \n      name={task.name} \n      completed={task.completed} \n      key={task.id} \n      toggleTaskCompleted={props.toggleTaskCompleted}\n      deleteTask={props.deleteTask}\n      editTask={props.editTask}\n      />\n  )\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task'\n  const headingText = `${taskList.length} ${tasksNoun} remaining`\n\n  // const filterList = FILTER_MAP.map( name => (\n  //   <FilterButton key={name} name={name} />\n  // ))\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name} \n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter} />\n  ));\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form appAddTask={props.addTask} />\n    \n      <div className=\"filters btn-group stack-exception\">\n       {filterList}\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        // role=\"list\"\n        className=\"todo-list stack-large stack-exchange\"\n        aria-labelledby=\"list-heading\" >\n            {taskList}\n        </ul>\n    </div>\n    \n  );\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst DATA = [\n  { id: \"todo-0\", completed: true, name: \"Eat\"},\n  { id: \"todo-1\", completed: false, name: \"Sleep\"},\n  { id: \"todo-2\", completed: false, name: \"Repeat\"},\n]\n\nReactDOM.render(\n  <React.StrictMode>\n    <App tasks={DATA}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}